@using Microsoft.AspNetCore.Mvc.Localization
@model PaginatedList<ContosoUniversity.Models.Student>
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Index"];
}

<h2>@Localizer["Students"]</h2>

<p>
    <a asp-action="Create">@Localizer["Create New"]</a>
</p>

<form asp-action="Index" method="get">
    <div class="form-group">
        @Localizer["Find by name:"] <input type="text" name="searchString" value="@ViewData["currentFilter"]" />
        <input type="submit" value=@Localizer["Search"] class="btn btn-default" />
        <a asp-action="Index">@Localizer["Back to list"]</a>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">@Html.DisplayNameFor(m => Model[0].LastName)</a>
                </th>
                <th>
                    @Html.DisplayNameFor(m => Model[0].FirstMidName)
                </th>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">@Html.DisplayNameFor(m => Model[0].EnrollmentDate)</a>
                </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstMidName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EnrollmentDate)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.ID">@Localizer["Edit"]</a> |
                <a asp-action="Details" asp-route-id="@item.ID">@Localizer["Details"]</a> |
                <a asp-action="Delete" asp-route-id="@item.ID">@Localizer["Delete"]</a>
            </td>
        </tr>
}
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    @Localizer["Previous"]
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    @Localizer["Next"]
</a>
